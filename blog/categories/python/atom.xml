<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Ashton Kemerling]]></title>
  <link href="http://www.ashtonkemerling.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.ashtonkemerling.com/"/>
  <updated>2013-10-23T22:00:52-06:00</updated>
  <id>http://www.ashtonkemerling.com/</id>
  <author>
    <name><![CDATA[Ashton Kemerling]]></name>
    <email><![CDATA[ashtonkemerling@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding vs. Assignment ]]></title>
    <link href="http://www.ashtonkemerling.com/blog/2013/04/30/binding-vs-assignment/"/>
    <updated>2013-04-30T07:23:00-06:00</updated>
    <id>http://www.ashtonkemerling.com/blog/2013/04/30/binding-vs-assignment</id>
    <content type="html"><![CDATA[<p>A coworker of mine was recently running into problems with the following snippet of Python code, and turned to another functionally oriented developer and myself for help.</p>

<p>``` python Odd Functions
funs = []
for i in ["a" "b"]:</p>

<pre><code>def internal_function():
    return i
funs.append(internal_function)
</code></pre>

<p>print funs<a href="">0</a>
print funs<a href="">1</a>
```</p>

<p>At first glance, one would expect this to print "a" then "b". But much to my surprise (and my coworkers frustration), it was returning "b" both times.</p>

<p>My first instinct was that Python was closing properly, but was messing up the namespacing. So I asked him to use lambdas instead, creating this:</p>

<p>``` python Lambdas
funs = []
for i in ["a", "b"]:</p>

<pre><code>funs.append(lambda : i)
</code></pre>

<p>print funs<a href="">0</a>
print funs<a href="">1</a>
```</p>

<p>Same result! So by this point we know that its not namespacing that is causing the problems, as you can't accidentally assign two lambdas the same name. So I began to suspect that the use of "i" was the issue. Perhaps we're closing around i, which is a mutable variable, and Python can't anticipate that we want a copy instead of the actual reference. Since i is mutable, both closures are having what i means changed from underneath them after closure creation time. (Coincidentally, Python 2.7.3 keeps i around even after the loop is completed, which I think is odd).</p>

<p>So the solution here would be to use a temporary variable. Any variable first created inside a loop should theoretically only have a lifespan of one iteration through the loop. So let's try the following:</p>

<p>``` python Temporary Variables
funs = []
for i in ["a", "b"]:</p>

<pre><code>temp = i
funs.append(lambda : temp)
</code></pre>

<p>print funs<a href="">0</a>
print funs<a href="">1</a>
```</p>

<p>Same result, again! So clearly python is mishandling variables by a large amount. So what's going on here? My fellow functional coworker was finally able to explain: the real problem here is that Python conflates binding and assignment. Binding is used to create a new variable <em>within the current context</em>, while assignment can only change the value of a given variable within the narrowest bound scope.</p>

<p>Why is this an issue? Well, Python uses the same symbol "=", to specify binding and assignment, while most other languages use two syntactic rules. For example Go apparently uses ":=" to bind, and "=" to assign. Java uses type declarations to denote bindings, and Clojure/Haskell more or less only have bindings underneath. Unfortunately there's an upper limit to how intelligent an imperative compiler can get, especially in interpreted languages where the compiler must be fairly quick. So Python doesn't do the leg work to realize that temp is only used inside the loop, and binds it only once <em>outside the loop</em>. The side effect of this is that anyone who closes over any local variable inside the loop will be surprised when it is mutated by further iterations, and said variables will be left laying around <strong>after the loop is done</strong>.</p>

<p>So how do we get out of this? One obvious option is to pick a language that understands the difference. Short of that, use a separate function to force Python's hand.</p>

<p>``` python Ugly Fix
def create_lambda(x):</p>

<pre><code>return lambda : x
</code></pre>

<p>funs = []
for i in ["a", "b"]:</p>

<pre><code>funs.append(create_lambda(i))
</code></pre>

<p>funs<a href="">0</a>
funs<a href="">1</a>
```</p>

<p>Which unfortunately is pretty ugly. Other languages will get you out of this bind though. Clojure has no concept of assigning variables, only binding. So the only way to create mutable state in Clojure is through successive binds, or via the special Software Transactional Memory functions, which are specially designed for concurrency.</p>

<p>``` clojure Nice and Clean
(def funs</p>

<pre><code> (for [i ["a" "b"]]
     (fn []
         i)))
</code></pre>

<p>(println ((first funs)))
(println ((second funs))
```</p>

<p>And according to my Go enthused coworker, this also works:</p>

<p>``` go</p>

<p>func main() {</p>

<pre><code>for i:=0; i&lt;4; i++ {
    tmp := i

    funs[i] = func () int {
        return tmp

        }
}
fmt.Println(funs[0]())
fmt.Println(funs[1]())
fmt.Println(funs[2]())
</code></pre>

<p>}
```</p>

<p>If you are currently working on a Python project, or are a Python enthusiast, the only hope is to be careful, and hope that Python 3's compiler might be more intelligent.</p>
]]></content>
  </entry>
  
</feed>
